"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

var _fractional = require("fractional");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

var _parentElement = /*#__PURE__*/new WeakMap();

var _data = /*#__PURE__*/new WeakMap();

var _errorMessage = /*#__PURE__*/new WeakMap();

var _clear = /*#__PURE__*/new WeakSet();

var _generateMarkup = /*#__PURE__*/new WeakSet();

var _generateMarkupIngredient = /*#__PURE__*/new WeakSet();

class RecipeView {
  constructor() {
    _generateMarkupIngredient.add(this);

    _generateMarkup.add(this);

    _clear.add(this);

    _parentElement.set(this, {
      writable: true,
      value: document.querySelector('.recipe')
    });

    _data.set(this, {
      writable: true,
      value: void 0
    });

    _errorMessage.set(this, {
      writable: true,
      value: 'We could not find that recipe. Please try again'
    });

    _defineProperty(this, "renderSpinner", function () {
      const markup = `
    <div class="spinner">
      <svg>
        <use href="${_icons.default}#icon-loader"></use>
      </svg>
    </div> 
    `;

      _classPrivateMethodGet(this, _clear, _clear2).call(this);

      _classPrivateFieldGet(this, _parentElement).insertAdjacentHTML('afterbegin', markup);
    });
  }

  render(data) {
    _classPrivateFieldSet(this, _data, data);

    const markup = _classPrivateMethodGet(this, _generateMarkup, _generateMarkup2).call(this);

    _classPrivateMethodGet(this, _clear, _clear2).call(this);

    _classPrivateFieldGet(this, _parentElement).insertAdjacentHTML('afterbegin', markup);
  }

  renderError(message = _classPrivateFieldGet(this, _errorMessage)) {
    const markup = `
    <div class="error">
      <div>
        <svg>
          <use href="${_icons.default}#icon-alert-triangle"></use>
        </svg>
      </div>
      <p>${message}</p>
    </div>
    `;

    _classPrivateMethodGet(this, _clear, _clear2).call(this);

    _classPrivateFieldGet(this, _parentElement).insertAdjacentHTML('afterbegin', markup);
  }

  addHandlerRender(handler) {
    ['hashchange', 'load'].forEach(event => window.addEventListener(event, handler)); //?NOTE listen for the hash change in the window location (address bar) and for the page to load then call the showRecipe function
  }

}

function _clear2() {
  _classPrivateFieldGet(this, _parentElement).innerHTML = '';
}

function _generateMarkup2() {
  console.log(_classPrivateFieldGet(this, _data));
  return `
      <figure class="recipe__fig">
        <img src=${_classPrivateFieldGet(this, _data).image} alt=${_classPrivateFieldGet(this, _data).title} class="recipe__img" crossOrigin="anonymous"/>
        <h1 class="recipe__title">
          <span>${_classPrivateFieldGet(this, _data).title}</span>
        </h1>
      </figure>

      <div class="recipe__details">
        <div class="recipe__info">
          <svg class="recipe__info-icon">
            <use href="${_icons.default}#icon-clock"></use>
          </svg>
          <span class="recipe__info-data recipe__info-data--minutes">${_classPrivateFieldGet(this, _data).cookingTime}</span>
          <span class="recipe__info-text">minutes</span>
        </div>
        <div class="recipe__info">
          <svg class="recipe__info-icon">
            <use href="${_icons.default}#icon-users"></use>
          </svg>
          <span class="recipe__info-data recipe__info-data--people">${_classPrivateFieldGet(this, _data).servings}</span>
          <span class="recipe__info-text">servings</span>

          <div class="recipe__info-buttons">
            <button class="btn--tiny btn--increase-servings">
              <svg>
                <use href="${_icons.default}#icon-minus-circle"></use>
              </svg>
            </button>
            <button class="btn--tiny btn--increase-servings">
              <svg>
                <use href="${_icons.default}#icon-plus-circle"></use>
              </svg>
            </button>
          </div>
        </div>

        <div class="recipe__user-generated">
          <svg>
            <use href="${_icons.default}#icon-user"></use>
          </svg>
        </div>
        <button class="btn--round">
          <svg class="">
            <use href="${_icons.default}#icon-bookmark-fill"></use>
          </svg>
        </button>
      </div>

      <div class="recipe__ingredients">
        <h2 class="heading--2">Recipe ingredients</h2>
        <ul class="recipe__ingredient-list">
        ${_classPrivateFieldGet(this, _data).ingredients.map(_classPrivateMethodGet(this, _generateMarkupIngredient, _generateMarkupIngredient2)).join('')}

        </ul>
      </div>

      <div class="recipe__directions">
        <h2 class="heading--2">How to cook it</h2>
        <p class="recipe__directions-text">
          This recipe was carefully designed and tested by
          <span class="recipe__publisher">${_classPrivateFieldGet(this, _data).publisher}</span>. Please check out
          directions at their website.
        </p>
        <a
          class="btn--small recipe__btn"
          href="${_classPrivateFieldGet(this, _data).sourceUrl}"
          target="_blank"
        >
          <span>Directions</span>
          <svg class="search__icon">
            <use href="${_icons.default}#icon-arrow-right"></use>
          </svg>
        </a>
      </div>
    `;
}

function _generateMarkupIngredient2(ing) {
  return `
    <li class="recipe__ingredient">
      <svg class="recipe__icon">
        <use href="${_icons.default}#icon-check"></use>
      </svg>
      <div class="recipe__quantity">${ing.quantity ? new _fractional.Fraction(ing.quantity).toString() : ""}</div>
      <div class="recipe__description">
        <span class="recipe__unit">${ing.unit}</span>
        ${ing.description}
      </div>
    </li>
    `;
}

var _default = new RecipeView();

exports.default = _default;